#===-- Generated python interface definitions for 'Core.h' -----------------===#
#
#                     The LLVM Compiler Infrastructure
#
# This file is distributed under the University of Illinois Open Source
# License. See LICENSE.TXT for details.
#
#===------------------------------------------------------------------------===#
#
# This file is automatically generated by 'generate-from-includes.py',
# do not edit manually.
#
#===-----------------------------------------------------------------------====#

import ctypes
from ..common import c_object_p

function_declarations = {
    'LLVMInitializeCore': (None,
                           ['LLVMPassRegistryRef']),
    'LLVMCreateMessage': (ctypes.POINTER(ctypes.c_char),
                          [ctypes.c_char_p]),
    'LLVMDisposeMessage': (None,
                           [ctypes.c_char_p]),
    'LLVMContextCreate': (c_object_p,
                          []),
    'LLVMGetGlobalContext': (c_object_p,
                             []),
    'LLVMContextDispose': (None,
                           ['LLVMContextRef']),
    'LLVMGetMDKindIDInContext': (ctypes.c_uint,
                                 ['LLVMContextRef', ctypes.c_char_p, ctypes.c_uint]),
    'LLVMGetMDKindID': (ctypes.c_uint,
                        [ctypes.c_char_p, ctypes.c_uint]),
    'LLVMModuleCreateWithName': (c_object_p,
                                 [ctypes.c_char_p]),
    'LLVMModuleCreateWithNameInContext': (c_object_p,
                                          [ctypes.c_char_p, 'LLVMContextRef']),
    'LLVMDisposeModule': (None,
                          ['LLVMModuleRef']),
    'LLVMGetDataLayout': (ctypes.POINTER(ctypes.c_char),
                          ['LLVMModuleRef']),
    'LLVMSetDataLayout': (None,
                          ['LLVMModuleRef', ctypes.c_char_p]),
    'LLVMGetTarget': (ctypes.POINTER(ctypes.c_char),
                      ['LLVMModuleRef']),
    'LLVMSetTarget': (None,
                      ['LLVMModuleRef', ctypes.c_char_p]),
    'LLVMDumpModule': (None,
                       ['LLVMModuleRef']),
    'LLVMPrintModuleToFile': ('LLVMBool',
                              ['LLVMModuleRef', ctypes.c_char_p, ctypes.POINTER(ctypes.c_char_p)]),
    'LLVMSetModuleInlineAsm': (None,
                               ['LLVMModuleRef', ctypes.c_char_p]),
    'LLVMGetModuleContext': (c_object_p,
                             ['LLVMModuleRef']),
    'LLVMGetTypeByName': (c_object_p,
                          ['LLVMModuleRef', ctypes.c_char_p]),
    'LLVMGetNamedMetadataNumOperands': (ctypes.c_uint,
                                        ['LLVMModuleRef', ctypes.c_char_p]),
    'LLVMGetNamedMetadataOperands': (None,
                                     ['LLVMModuleRef', ctypes.c_char_p, ctypes.POINTER(c_object_p)]),
    'LLVMAddNamedMetadataOperand': (None,
                                    ['LLVMModuleRef', ctypes.c_char_p, 'LLVMValueRef']),
    'LLVMAddFunction': (c_object_p,
                        ['LLVMModuleRef', ctypes.c_char_p, 'LLVMTypeRef']),
    'LLVMGetNamedFunction': (c_object_p,
                             ['LLVMModuleRef', ctypes.c_char_p]),
    'LLVMGetFirstFunction': (c_object_p,
                             ['LLVMModuleRef']),
    'LLVMGetLastFunction': (c_object_p,
                            ['LLVMModuleRef']),
    'LLVMGetNextFunction': (c_object_p,
                            ['LLVMValueRef']),
    'LLVMGetPreviousFunction': (c_object_p,
                                ['LLVMValueRef']),
    'LLVMGetTypeKind': ('LLVMTypeKind',
                        ['LLVMTypeRef']),
    'LLVMTypeIsSized': ('LLVMBool',
                        ['LLVMTypeRef']),
    'LLVMGetTypeContext': (c_object_p,
                           ['LLVMTypeRef']),
    'LLVMInt1TypeInContext': (c_object_p,
                              ['LLVMContextRef']),
    'LLVMInt8TypeInContext': (c_object_p,
                              ['LLVMContextRef']),
    'LLVMInt16TypeInContext': (c_object_p,
                               ['LLVMContextRef']),
    'LLVMInt32TypeInContext': (c_object_p,
                               ['LLVMContextRef']),
    'LLVMInt64TypeInContext': (c_object_p,
                               ['LLVMContextRef']),
    'LLVMIntTypeInContext': (c_object_p,
                             ['LLVMContextRef', ctypes.c_uint]),
    'LLVMInt1Type': (c_object_p,
                     []),
    'LLVMInt8Type': (c_object_p,
                     []),
    'LLVMInt16Type': (c_object_p,
                      []),
    'LLVMInt32Type': (c_object_p,
                      []),
    'LLVMInt64Type': (c_object_p,
                      []),
    'LLVMIntType': (c_object_p,
                    [ctypes.c_uint]),
    'LLVMGetIntTypeWidth': (ctypes.c_uint,
                            ['LLVMTypeRef']),
    'LLVMHalfTypeInContext': (c_object_p,
                              ['LLVMContextRef']),
    'LLVMFloatTypeInContext': (c_object_p,
                               ['LLVMContextRef']),
    'LLVMDoubleTypeInContext': (c_object_p,
                                ['LLVMContextRef']),
    'LLVMX86FP80TypeInContext': (c_object_p,
                                 ['LLVMContextRef']),
    'LLVMFP128TypeInContext': (c_object_p,
                               ['LLVMContextRef']),
    'LLVMPPCFP128TypeInContext': (c_object_p,
                                  ['LLVMContextRef']),
    'LLVMHalfType': (c_object_p,
                     []),
    'LLVMFloatType': (c_object_p,
                      []),
    'LLVMDoubleType': (c_object_p,
                       []),
    'LLVMX86FP80Type': (c_object_p,
                        []),
    'LLVMFP128Type': (c_object_p,
                      []),
    'LLVMPPCFP128Type': (c_object_p,
                         []),
    'LLVMFunctionType': (c_object_p,
                         ['LLVMTypeRef', ctypes.POINTER(c_object_p), ctypes.c_uint, 'LLVMBool']),
    'LLVMIsFunctionVarArg': ('LLVMBool',
                             ['LLVMTypeRef']),
    'LLVMGetReturnType': (c_object_p,
                          ['LLVMTypeRef']),
    'LLVMCountParamTypes': (ctypes.c_uint,
                            ['LLVMTypeRef']),
    'LLVMGetParamTypes': (None,
                          ['LLVMTypeRef', ctypes.POINTER(c_object_p)]),
    'LLVMStructTypeInContext': (c_object_p,
                                ['LLVMContextRef', ctypes.POINTER(c_object_p), ctypes.c_uint, 'LLVMBool']),
    'LLVMStructType': (c_object_p,
                       [ctypes.POINTER(c_object_p), ctypes.c_uint, 'LLVMBool']),
    'LLVMStructCreateNamed': (c_object_p,
                              ['LLVMContextRef', ctypes.c_char_p]),
    'LLVMGetStructName': (ctypes.POINTER(ctypes.c_char),
                          ['LLVMTypeRef']),
    'LLVMStructSetBody': (None,
                          ['LLVMTypeRef', ctypes.POINTER(c_object_p), ctypes.c_uint, 'LLVMBool']),
    'LLVMCountStructElementTypes': (ctypes.c_uint,
                                    ['LLVMTypeRef']),
    'LLVMGetStructElementTypes': (None,
                                  ['LLVMTypeRef', ctypes.POINTER(c_object_p)]),
    'LLVMIsPackedStruct': ('LLVMBool',
                           ['LLVMTypeRef']),
    'LLVMIsOpaqueStruct': ('LLVMBool',
                           ['LLVMTypeRef']),
    'LLVMGetElementType': (c_object_p,
                           ['LLVMTypeRef']),
    'LLVMArrayType': (c_object_p,
                      ['LLVMTypeRef', ctypes.c_uint]),
    'LLVMGetArrayLength': (ctypes.c_uint,
                           ['LLVMTypeRef']),
    'LLVMPointerType': (c_object_p,
                        ['LLVMTypeRef', ctypes.c_uint]),
    'LLVMGetPointerAddressSpace': (ctypes.c_uint,
                                   ['LLVMTypeRef']),
    'LLVMVectorType': (c_object_p,
                       ['LLVMTypeRef', ctypes.c_uint]),
    'LLVMGetVectorSize': (ctypes.c_uint,
                          ['LLVMTypeRef']),
    'LLVMVoidTypeInContext': (c_object_p,
                              ['LLVMContextRef']),
    'LLVMLabelTypeInContext': (c_object_p,
                               ['LLVMContextRef']),
    'LLVMX86MMXTypeInContext': (c_object_p,
                                ['LLVMContextRef']),
    'LLVMVoidType': (c_object_p,
                     []),
    'LLVMLabelType': (c_object_p,
                      []),
    'LLVMX86MMXType': (c_object_p,
                       []),
    'LLVMTypeOf': (c_object_p,
                   ['LLVMValueRef']),
    'LLVMGetValueName': (ctypes.POINTER(ctypes.c_char),
                         ['LLVMValueRef']),
    'LLVMSetValueName': (None,
                         ['LLVMValueRef', ctypes.c_char_p]),
    'LLVMDumpValue': (None,
                      ['LLVMValueRef']),
    'LLVMReplaceAllUsesWith': (None,
                               ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMIsConstant': ('LLVMBool',
                       ['LLVMValueRef']),
    'LLVMIsUndef': ('LLVMBool',
                    ['LLVMValueRef']),
    'LLVMIsAArgument': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMIsABasicBlock': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsAInlineAsm': (c_object_p,
                         ['LLVMValueRef']),
    'LLVMIsAMDNode': (c_object_p,
                      ['LLVMValueRef']),
    'LLVMIsAMDString': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMIsAUser': (c_object_p,
                    ['LLVMValueRef']),
    'LLVMIsAConstant': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMIsABlockAddress': (c_object_p,
                            ['LLVMValueRef']),
    'LLVMIsAConstantAggregateZero': (c_object_p,
                                     ['LLVMValueRef']),
    'LLVMIsAConstantArray': (c_object_p,
                             ['LLVMValueRef']),
    'LLVMIsAConstantExpr': (c_object_p,
                            ['LLVMValueRef']),
    'LLVMIsAConstantFP': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsAConstantInt': (c_object_p,
                           ['LLVMValueRef']),
    'LLVMIsAConstantPointerNull': (c_object_p,
                                   ['LLVMValueRef']),
    'LLVMIsAConstantStruct': (c_object_p,
                              ['LLVMValueRef']),
    'LLVMIsAConstantVector': (c_object_p,
                              ['LLVMValueRef']),
    'LLVMIsAGlobalValue': (c_object_p,
                           ['LLVMValueRef']),
    'LLVMIsAFunction': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMIsAGlobalAlias': (c_object_p,
                           ['LLVMValueRef']),
    'LLVMIsAGlobalVariable': (c_object_p,
                              ['LLVMValueRef']),
    'LLVMIsAUndefValue': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsAInstruction': (c_object_p,
                           ['LLVMValueRef']),
    'LLVMIsABinaryOperator': (c_object_p,
                              ['LLVMValueRef']),
    'LLVMIsACallInst': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMIsAIntrinsicInst': (c_object_p,
                             ['LLVMValueRef']),
    'LLVMIsADbgInfoIntrinsic': (c_object_p,
                                ['LLVMValueRef']),
    'LLVMIsADbgDeclareInst': (c_object_p,
                              ['LLVMValueRef']),
    'LLVMIsAMemIntrinsic': (c_object_p,
                            ['LLVMValueRef']),
    'LLVMIsAMemCpyInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsAMemMoveInst': (c_object_p,
                           ['LLVMValueRef']),
    'LLVMIsAMemSetInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsACmpInst': (c_object_p,
                       ['LLVMValueRef']),
    'LLVMIsAFCmpInst': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMIsAICmpInst': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMIsAExtractElementInst': (c_object_p,
                                  ['LLVMValueRef']),
    'LLVMIsAGetElementPtrInst': (c_object_p,
                                 ['LLVMValueRef']),
    'LLVMIsAInsertElementInst': (c_object_p,
                                 ['LLVMValueRef']),
    'LLVMIsAInsertValueInst': (c_object_p,
                               ['LLVMValueRef']),
    'LLVMIsALandingPadInst': (c_object_p,
                              ['LLVMValueRef']),
    'LLVMIsAPHINode': (c_object_p,
                       ['LLVMValueRef']),
    'LLVMIsASelectInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsAShuffleVectorInst': (c_object_p,
                                 ['LLVMValueRef']),
    'LLVMIsAStoreInst': (c_object_p,
                         ['LLVMValueRef']),
    'LLVMIsATerminatorInst': (c_object_p,
                              ['LLVMValueRef']),
    'LLVMIsABranchInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsAIndirectBrInst': (c_object_p,
                              ['LLVMValueRef']),
    'LLVMIsAInvokeInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsAReturnInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsASwitchInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsAUnreachableInst': (c_object_p,
                               ['LLVMValueRef']),
    'LLVMIsAResumeInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsAUnaryInstruction': (c_object_p,
                                ['LLVMValueRef']),
    'LLVMIsAAllocaInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsACastInst': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMIsABitCastInst': (c_object_p,
                           ['LLVMValueRef']),
    'LLVMIsAFPExtInst': (c_object_p,
                         ['LLVMValueRef']),
    'LLVMIsAFPToSIInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsAFPToUIInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsAFPTruncInst': (c_object_p,
                           ['LLVMValueRef']),
    'LLVMIsAIntToPtrInst': (c_object_p,
                            ['LLVMValueRef']),
    'LLVMIsAPtrToIntInst': (c_object_p,
                            ['LLVMValueRef']),
    'LLVMIsASExtInst': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMIsASIToFPInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsATruncInst': (c_object_p,
                         ['LLVMValueRef']),
    'LLVMIsAUIToFPInst': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMIsAZExtInst': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMIsAExtractValueInst': (c_object_p,
                                ['LLVMValueRef']),
    'LLVMIsALoadInst': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMIsAVAArgInst': (c_object_p,
                         ['LLVMValueRef']),
    'LLVMGetFirstUse': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMGetNextUse': (c_object_p,
                       ['LLVMUseRef']),
    'LLVMGetUser': (c_object_p,
                    ['LLVMUseRef']),
    'LLVMGetUsedValue': (c_object_p,
                         ['LLVMUseRef']),
    'LLVMGetOperand': (c_object_p,
                       ['LLVMValueRef', ctypes.c_uint]),
    'LLVMSetOperand': (None,
                       ['LLVMValueRef', ctypes.c_uint, 'LLVMValueRef']),
    'LLVMGetNumOperands': (ctypes.c_int,
                           ['LLVMValueRef']),
    'LLVMConstNull': (c_object_p,
                      ['LLVMTypeRef']),
    'LLVMConstAllOnes': (c_object_p,
                         ['LLVMTypeRef']),
    'LLVMGetUndef': (c_object_p,
                     ['LLVMTypeRef']),
    'LLVMIsNull': ('LLVMBool',
                   ['LLVMValueRef']),
    'LLVMConstPointerNull': (c_object_p,
                             ['LLVMTypeRef']),
    'LLVMConstInt': (c_object_p,
                     ['LLVMTypeRef', ctypes.c_ulonglong, 'LLVMBool']),
    'LLVMConstIntOfArbitraryPrecision': (c_object_p,
                                         ['LLVMTypeRef', ctypes.c_uint, ctypes.POINTER(ctypes.c_uint64)]),
    'LLVMConstIntOfString': (c_object_p,
                             ['LLVMTypeRef', ctypes.c_char_p, ctypes.c_ubyte]),
    'LLVMConstIntOfStringAndSize': (c_object_p,
                                    ['LLVMTypeRef', ctypes.c_char_p, ctypes.c_uint, ctypes.c_ubyte]),
    'LLVMConstReal': (c_object_p,
                      ['LLVMTypeRef', ctypes.c_double]),
    'LLVMConstRealOfString': (c_object_p,
                              ['LLVMTypeRef', ctypes.c_char_p]),
    'LLVMConstRealOfStringAndSize': (c_object_p,
                                     ['LLVMTypeRef', ctypes.c_char_p, ctypes.c_uint]),
    'LLVMConstIntGetZExtValue': (ctypes.c_ulonglong,
                                 ['LLVMValueRef']),
    'LLVMConstIntGetSExtValue': (ctypes.c_longlong,
                                 ['LLVMValueRef']),
    'LLVMConstStringInContext': (c_object_p,
                                 ['LLVMContextRef', ctypes.c_char_p, ctypes.c_uint, 'LLVMBool']),
    'LLVMConstString': (c_object_p,
                        [ctypes.c_char_p, ctypes.c_uint, 'LLVMBool']),
    'LLVMConstStructInContext': (c_object_p,
                                 ['LLVMContextRef', ctypes.POINTER(c_object_p), ctypes.c_uint, 'LLVMBool']),
    'LLVMConstStruct': (c_object_p,
                        [ctypes.POINTER(c_object_p), ctypes.c_uint, 'LLVMBool']),
    'LLVMConstArray': (c_object_p,
                       ['LLVMTypeRef', ctypes.POINTER(c_object_p), ctypes.c_uint]),
    'LLVMConstNamedStruct': (c_object_p,
                             ['LLVMTypeRef', ctypes.POINTER(c_object_p), ctypes.c_uint]),
    'LLVMConstVector': (c_object_p,
                        [ctypes.POINTER(c_object_p), ctypes.c_uint]),
    'LLVMGetConstOpcode': ('LLVMOpcode',
                           ['LLVMValueRef']),
    'LLVMAlignOf': (c_object_p,
                    ['LLVMTypeRef']),
    'LLVMSizeOf': (c_object_p,
                   ['LLVMTypeRef']),
    'LLVMConstNeg': (c_object_p,
                     ['LLVMValueRef']),
    'LLVMConstNSWNeg': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMConstNUWNeg': (c_object_p,
                        ['LLVMValueRef']),
    'LLVMConstFNeg': (c_object_p,
                      ['LLVMValueRef']),
    'LLVMConstNot': (c_object_p,
                     ['LLVMValueRef']),
    'LLVMConstAdd': (c_object_p,
                     ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstNSWAdd': (c_object_p,
                        ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstNUWAdd': (c_object_p,
                        ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstFAdd': (c_object_p,
                      ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstSub': (c_object_p,
                     ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstNSWSub': (c_object_p,
                        ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstNUWSub': (c_object_p,
                        ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstFSub': (c_object_p,
                      ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstMul': (c_object_p,
                     ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstNSWMul': (c_object_p,
                        ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstNUWMul': (c_object_p,
                        ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstFMul': (c_object_p,
                      ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstUDiv': (c_object_p,
                      ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstSDiv': (c_object_p,
                      ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstExactSDiv': (c_object_p,
                           ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstFDiv': (c_object_p,
                      ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstURem': (c_object_p,
                      ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstSRem': (c_object_p,
                      ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstFRem': (c_object_p,
                      ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstAnd': (c_object_p,
                     ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstOr': (c_object_p,
                    ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstXor': (c_object_p,
                     ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstICmp': (c_object_p,
                      ['LLVMIntPredicate', 'LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstFCmp': (c_object_p,
                      ['LLVMRealPredicate', 'LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstShl': (c_object_p,
                     ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstLShr': (c_object_p,
                      ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstAShr': (c_object_p,
                      ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstGEP': (c_object_p,
                     ['LLVMValueRef', ctypes.POINTER(c_object_p), ctypes.c_uint]),
    'LLVMConstInBoundsGEP': (c_object_p,
                             ['LLVMValueRef', ctypes.POINTER(c_object_p), ctypes.c_uint]),
    'LLVMConstTrunc': (c_object_p,
                       ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstSExt': (c_object_p,
                      ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstZExt': (c_object_p,
                      ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstFPTrunc': (c_object_p,
                         ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstFPExt': (c_object_p,
                       ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstUIToFP': (c_object_p,
                        ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstSIToFP': (c_object_p,
                        ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstFPToUI': (c_object_p,
                        ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstFPToSI': (c_object_p,
                        ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstPtrToInt': (c_object_p,
                          ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstIntToPtr': (c_object_p,
                          ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstBitCast': (c_object_p,
                         ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstZExtOrBitCast': (c_object_p,
                               ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstSExtOrBitCast': (c_object_p,
                               ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstTruncOrBitCast': (c_object_p,
                                ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstPointerCast': (c_object_p,
                             ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstIntCast': (c_object_p,
                         ['LLVMValueRef', 'LLVMTypeRef', 'LLVMBool']),
    'LLVMConstFPCast': (c_object_p,
                        ['LLVMValueRef', 'LLVMTypeRef']),
    'LLVMConstSelect': (c_object_p,
                        ['LLVMValueRef', 'LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstExtractElement': (c_object_p,
                                ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstInsertElement': (c_object_p,
                               ['LLVMValueRef', 'LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstShuffleVector': (c_object_p,
                               ['LLVMValueRef', 'LLVMValueRef', 'LLVMValueRef']),
    'LLVMConstExtractValue': (c_object_p,
                              ['LLVMValueRef', ctypes.POINTER(ctypes.c_uint), ctypes.c_uint]),
    'LLVMConstInsertValue': (c_object_p,
                             ['LLVMValueRef', 'LLVMValueRef', ctypes.POINTER(ctypes.c_uint), ctypes.c_uint]),
    'LLVMConstInlineAsm': (c_object_p,
                           ['LLVMTypeRef', ctypes.c_char_p, ctypes.c_char_p, 'LLVMBool', 'LLVMBool']),
    'LLVMBlockAddress': (c_object_p,
                         ['LLVMValueRef', 'LLVMBasicBlockRef']),
    'LLVMGetGlobalParent': (c_object_p,
                            ['LLVMValueRef']),
    'LLVMIsDeclaration': ('LLVMBool',
                          ['LLVMValueRef']),
    'LLVMGetLinkage': ('LLVMLinkage',
                       ['LLVMValueRef']),
    'LLVMSetLinkage': (None,
                       ['LLVMValueRef', 'LLVMLinkage']),
    'LLVMGetSection': (ctypes.POINTER(ctypes.c_char),
                       ['LLVMValueRef']),
    'LLVMSetSection': (None,
                       ['LLVMValueRef', ctypes.c_char_p]),
    'LLVMGetVisibility': ('LLVMVisibility',
                          ['LLVMValueRef']),
    'LLVMSetVisibility': (None,
                          ['LLVMValueRef', 'LLVMVisibility']),
    'LLVMGetAlignment': (ctypes.c_uint,
                         ['LLVMValueRef']),
    'LLVMSetAlignment': (None,
                         ['LLVMValueRef', ctypes.c_uint]),
    'LLVMAddGlobal': (c_object_p,
                      ['LLVMModuleRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMAddGlobalInAddressSpace': (c_object_p,
                                    ['LLVMModuleRef', 'LLVMTypeRef', ctypes.c_char_p, ctypes.c_uint]),
    'LLVMGetNamedGlobal': (c_object_p,
                           ['LLVMModuleRef', ctypes.c_char_p]),
    'LLVMGetFirstGlobal': (c_object_p,
                           ['LLVMModuleRef']),
    'LLVMGetLastGlobal': (c_object_p,
                          ['LLVMModuleRef']),
    'LLVMGetNextGlobal': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMGetPreviousGlobal': (c_object_p,
                              ['LLVMValueRef']),
    'LLVMDeleteGlobal': (None,
                         ['LLVMValueRef']),
    'LLVMGetInitializer': (c_object_p,
                           ['LLVMValueRef']),
    'LLVMSetInitializer': (None,
                           ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMIsThreadLocal': ('LLVMBool',
                          ['LLVMValueRef']),
    'LLVMSetThreadLocal': (None,
                           ['LLVMValueRef', 'LLVMBool']),
    'LLVMIsGlobalConstant': ('LLVMBool',
                             ['LLVMValueRef']),
    'LLVMSetGlobalConstant': (None,
                              ['LLVMValueRef', 'LLVMBool']),
    'LLVMGetThreadLocalMode': ('LLVMThreadLocalMode',
                               ['LLVMValueRef']),
    'LLVMSetThreadLocalMode': (None,
                               ['LLVMValueRef', 'LLVMThreadLocalMode']),
    'LLVMIsExternallyInitialized': ('LLVMBool',
                                    ['LLVMValueRef']),
    'LLVMSetExternallyInitialized': (None,
                                     ['LLVMValueRef', 'LLVMBool']),
    'LLVMAddAlias': (c_object_p,
                     ['LLVMModuleRef', 'LLVMTypeRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMDeleteFunction': (None,
                           ['LLVMValueRef']),
    'LLVMGetIntrinsicID': (ctypes.c_uint,
                           ['LLVMValueRef']),
    'LLVMGetFunctionCallConv': (ctypes.c_uint,
                                ['LLVMValueRef']),
    'LLVMSetFunctionCallConv': (None,
                                ['LLVMValueRef', ctypes.c_uint]),
    'LLVMGetGC': (ctypes.POINTER(ctypes.c_char),
                  ['LLVMValueRef']),
    'LLVMSetGC': (None,
                  ['LLVMValueRef', ctypes.c_char_p]),
    'LLVMAddFunctionAttr': (None,
                            ['LLVMValueRef', 'LLVMAttribute']),
    'LLVMAddTargetDependentFunctionAttr': (None,
                                           ['LLVMValueRef', ctypes.c_char_p, ctypes.c_char_p]),
    'LLVMGetFunctionAttr': ('LLVMAttribute',
                            ['LLVMValueRef']),
    'LLVMRemoveFunctionAttr': (None,
                               ['LLVMValueRef', 'LLVMAttribute']),
    'LLVMCountParams': (ctypes.c_uint,
                        ['LLVMValueRef']),
    'LLVMGetParams': (None,
                      ['LLVMValueRef', ctypes.POINTER(c_object_p)]),
    'LLVMGetParam': (c_object_p,
                     ['LLVMValueRef', ctypes.c_uint]),
    'LLVMGetParamParent': (c_object_p,
                           ['LLVMValueRef']),
    'LLVMGetFirstParam': (c_object_p,
                          ['LLVMValueRef']),
    'LLVMGetLastParam': (c_object_p,
                         ['LLVMValueRef']),
    'LLVMGetNextParam': (c_object_p,
                         ['LLVMValueRef']),
    'LLVMGetPreviousParam': (c_object_p,
                             ['LLVMValueRef']),
    'LLVMAddAttribute': (None,
                         ['LLVMValueRef', 'LLVMAttribute']),
    'LLVMRemoveAttribute': (None,
                            ['LLVMValueRef', 'LLVMAttribute']),
    'LLVMGetAttribute': ('LLVMAttribute',
                         ['LLVMValueRef']),
    'LLVMSetParamAlignment': (None,
                              ['LLVMValueRef', ctypes.c_uint]),
    'LLVMMDStringInContext': (c_object_p,
                              ['LLVMContextRef', ctypes.c_char_p, ctypes.c_uint]),
    'LLVMMDString': (c_object_p,
                     [ctypes.c_char_p, ctypes.c_uint]),
    'LLVMMDNodeInContext': (c_object_p,
                            ['LLVMContextRef', ctypes.POINTER(c_object_p), ctypes.c_uint]),
    'LLVMMDNode': (c_object_p,
                   [ctypes.POINTER(c_object_p), ctypes.c_uint]),
    'LLVMGetMDString': (ctypes.POINTER(ctypes.c_char),
                        ['LLVMValueRef', ctypes.POINTER(ctypes.c_uint)]),
    'LLVMGetMDNodeNumOperands': (ctypes.c_uint,
                                 ['LLVMValueRef']),
    'LLVMGetMDNodeOperands': (None,
                              ['LLVMValueRef', ctypes.POINTER(c_object_p)]),
    'LLVMBasicBlockAsValue': (c_object_p,
                              ['LLVMBasicBlockRef']),
    'LLVMValueIsBasicBlock': ('LLVMBool',
                              ['LLVMValueRef']),
    'LLVMValueAsBasicBlock': (c_object_p,
                              ['LLVMValueRef']),
    'LLVMGetBasicBlockParent': (c_object_p,
                                ['LLVMBasicBlockRef']),
    'LLVMGetBasicBlockTerminator': (c_object_p,
                                    ['LLVMBasicBlockRef']),
    'LLVMCountBasicBlocks': (ctypes.c_uint,
                             ['LLVMValueRef']),
    'LLVMGetBasicBlocks': (None,
                           ['LLVMValueRef', ctypes.POINTER(c_object_p)]),
    'LLVMGetFirstBasicBlock': (c_object_p,
                               ['LLVMValueRef']),
    'LLVMGetLastBasicBlock': (c_object_p,
                              ['LLVMValueRef']),
    'LLVMGetNextBasicBlock': (c_object_p,
                              ['LLVMBasicBlockRef']),
    'LLVMGetPreviousBasicBlock': (c_object_p,
                                  ['LLVMBasicBlockRef']),
    'LLVMGetEntryBasicBlock': (c_object_p,
                               ['LLVMValueRef']),
    'LLVMAppendBasicBlockInContext': (c_object_p,
                                      ['LLVMContextRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMAppendBasicBlock': (c_object_p,
                             ['LLVMValueRef', ctypes.c_char_p]),
    'LLVMInsertBasicBlockInContext': (c_object_p,
                                      ['LLVMContextRef', 'LLVMBasicBlockRef', ctypes.c_char_p]),
    'LLVMInsertBasicBlock': (c_object_p,
                             ['LLVMBasicBlockRef', ctypes.c_char_p]),
    'LLVMDeleteBasicBlock': (None,
                             ['LLVMBasicBlockRef']),
    'LLVMRemoveBasicBlockFromParent': (None,
                                       ['LLVMBasicBlockRef']),
    'LLVMMoveBasicBlockBefore': (None,
                                 ['LLVMBasicBlockRef', 'LLVMBasicBlockRef']),
    'LLVMMoveBasicBlockAfter': (None,
                                ['LLVMBasicBlockRef', 'LLVMBasicBlockRef']),
    'LLVMGetFirstInstruction': (c_object_p,
                                ['LLVMBasicBlockRef']),
    'LLVMGetLastInstruction': (c_object_p,
                               ['LLVMBasicBlockRef']),
    'LLVMHasMetadata': (ctypes.c_int,
                        ['LLVMValueRef']),
    'LLVMGetMetadata': (c_object_p,
                        ['LLVMValueRef', ctypes.c_uint]),
    'LLVMSetMetadata': (None,
                        ['LLVMValueRef', ctypes.c_uint, 'LLVMValueRef']),
    'LLVMGetInstructionParent': (c_object_p,
                                 ['LLVMValueRef']),
    'LLVMGetNextInstruction': (c_object_p,
                               ['LLVMValueRef']),
    'LLVMGetPreviousInstruction': (c_object_p,
                                   ['LLVMValueRef']),
    'LLVMInstructionEraseFromParent': (None,
                                       ['LLVMValueRef']),
    'LLVMGetInstructionOpcode': ('LLVMOpcode',
                                 ['LLVMValueRef']),
    'LLVMGetICmpPredicate': ('LLVMIntPredicate',
                             ['LLVMValueRef']),
    'LLVMSetInstructionCallConv': (None,
                                   ['LLVMValueRef', ctypes.c_uint]),
    'LLVMGetInstructionCallConv': (ctypes.c_uint,
                                   ['LLVMValueRef']),
    'LLVMAddInstrAttribute': (None,
                              ['LLVMValueRef', ctypes.c_uint, 'LLVMAttribute']),
    'LLVMRemoveInstrAttribute': (None,
                                 ['LLVMValueRef', ctypes.c_uint, 'LLVMAttribute']),
    'LLVMSetInstrParamAlignment': (None,
                                   ['LLVMValueRef', ctypes.c_uint, ctypes.c_uint]),
    'LLVMIsTailCall': ('LLVMBool',
                       ['LLVMValueRef']),
    'LLVMSetTailCall': (None,
                        ['LLVMValueRef', 'LLVMBool']),
    'LLVMGetSwitchDefaultDest': (c_object_p,
                                 ['LLVMValueRef']),
    'LLVMAddIncoming': (None,
                        ['LLVMValueRef', ctypes.POINTER(c_object_p), ctypes.POINTER(c_object_p), ctypes.c_uint]),
    'LLVMCountIncoming': (ctypes.c_uint,
                          ['LLVMValueRef']),
    'LLVMGetIncomingValue': (c_object_p,
                             ['LLVMValueRef', ctypes.c_uint]),
    'LLVMGetIncomingBlock': (c_object_p,
                             ['LLVMValueRef', ctypes.c_uint]),
    'LLVMCreateBuilderInContext': (c_object_p,
                                   ['LLVMContextRef']),
    'LLVMCreateBuilder': (c_object_p,
                          []),
    'LLVMPositionBuilder': (None,
                            ['LLVMBuilderRef', 'LLVMBasicBlockRef', 'LLVMValueRef']),
    'LLVMPositionBuilderBefore': (None,
                                  ['LLVMBuilderRef', 'LLVMValueRef']),
    'LLVMPositionBuilderAtEnd': (None,
                                 ['LLVMBuilderRef', 'LLVMBasicBlockRef']),
    'LLVMGetInsertBlock': (c_object_p,
                           ['LLVMBuilderRef']),
    'LLVMClearInsertionPosition': (None,
                                   ['LLVMBuilderRef']),
    'LLVMInsertIntoBuilder': (None,
                              ['LLVMBuilderRef', 'LLVMValueRef']),
    'LLVMInsertIntoBuilderWithName': (None,
                                      ['LLVMBuilderRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMDisposeBuilder': (None,
                           ['LLVMBuilderRef']),
    'LLVMSetCurrentDebugLocation': (None,
                                    ['LLVMBuilderRef', 'LLVMValueRef']),
    'LLVMGetCurrentDebugLocation': (c_object_p,
                                    ['LLVMBuilderRef']),
    'LLVMSetInstDebugLocation': (None,
                                 ['LLVMBuilderRef', 'LLVMValueRef']),
    'LLVMBuildRetVoid': (c_object_p,
                         ['LLVMBuilderRef']),
    'LLVMBuildRet': (c_object_p,
                     ['LLVMBuilderRef', 'LLVMValueRef']),
    'LLVMBuildAggregateRet': (c_object_p,
                              ['LLVMBuilderRef', ctypes.POINTER(c_object_p), ctypes.c_uint]),
    'LLVMBuildBr': (c_object_p,
                    ['LLVMBuilderRef', 'LLVMBasicBlockRef']),
    'LLVMBuildCondBr': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMBasicBlockRef', 'LLVMBasicBlockRef']),
    'LLVMBuildSwitch': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMBasicBlockRef', ctypes.c_uint]),
    'LLVMBuildIndirectBr': (c_object_p,
                            ['LLVMBuilderRef', 'LLVMValueRef', ctypes.c_uint]),
    'LLVMBuildInvoke': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', ctypes.POINTER(c_object_p), ctypes.c_uint, 'LLVMBasicBlockRef', 'LLVMBasicBlockRef', ctypes.c_char_p]),
    'LLVMBuildLandingPad': (c_object_p,
                            ['LLVMBuilderRef', 'LLVMTypeRef', 'LLVMValueRef', ctypes.c_uint, ctypes.c_char_p]),
    'LLVMBuildResume': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef']),
    'LLVMBuildUnreachable': (c_object_p,
                             ['LLVMBuilderRef']),
    'LLVMAddCase': (None,
                    ['LLVMValueRef', 'LLVMValueRef', 'LLVMBasicBlockRef']),
    'LLVMAddDestination': (None,
                           ['LLVMValueRef', 'LLVMBasicBlockRef']),
    'LLVMAddClause': (None,
                      ['LLVMValueRef', 'LLVMValueRef']),
    'LLVMSetCleanup': (None,
                       ['LLVMValueRef', 'LLVMBool']),
    'LLVMBuildAdd': (c_object_p,
                     ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildNSWAdd': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildNUWAdd': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildFAdd': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildSub': (c_object_p,
                     ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildNSWSub': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildNUWSub': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildFSub': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildMul': (c_object_p,
                     ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildNSWMul': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildNUWMul': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildFMul': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildUDiv': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildSDiv': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildExactSDiv': (c_object_p,
                           ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildFDiv': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildURem': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildSRem': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildFRem': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildShl': (c_object_p,
                     ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildLShr': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildAShr': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildAnd': (c_object_p,
                     ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildOr': (c_object_p,
                    ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildXor': (c_object_p,
                     ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildBinOp': (c_object_p,
                       ['LLVMBuilderRef', 'LLVMOpcode', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildNeg': (c_object_p,
                     ['LLVMBuilderRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildNSWNeg': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildNUWNeg': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildFNeg': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildNot': (c_object_p,
                     ['LLVMBuilderRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildMalloc': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildArrayMalloc': (c_object_p,
                             ['LLVMBuilderRef', 'LLVMTypeRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildAlloca': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildArrayAlloca': (c_object_p,
                             ['LLVMBuilderRef', 'LLVMTypeRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildFree': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef']),
    'LLVMBuildLoad': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildStore': (c_object_p,
                       ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef']),
    'LLVMBuildGEP': (c_object_p,
                     ['LLVMBuilderRef', 'LLVMValueRef', ctypes.POINTER(c_object_p), ctypes.c_uint, ctypes.c_char_p]),
    'LLVMBuildInBoundsGEP': (c_object_p,
                             ['LLVMBuilderRef', 'LLVMValueRef', ctypes.POINTER(c_object_p), ctypes.c_uint, ctypes.c_char_p]),
    'LLVMBuildStructGEP': (c_object_p,
                           ['LLVMBuilderRef', 'LLVMValueRef', ctypes.c_uint, ctypes.c_char_p]),
    'LLVMBuildGlobalString': (c_object_p,
                              ['LLVMBuilderRef', ctypes.c_char_p, ctypes.c_char_p]),
    'LLVMBuildGlobalStringPtr': (c_object_p,
                                 ['LLVMBuilderRef', ctypes.c_char_p, ctypes.c_char_p]),
    'LLVMGetVolatile': ('LLVMBool',
                        ['LLVMValueRef']),
    'LLVMSetVolatile': (None,
                        ['LLVMValueRef', 'LLVMBool']),
    'LLVMBuildTrunc': (c_object_p,
                       ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildZExt': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildSExt': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildFPToUI': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildFPToSI': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildUIToFP': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildSIToFP': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildFPTrunc': (c_object_p,
                         ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildFPExt': (c_object_p,
                       ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildPtrToInt': (c_object_p,
                          ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildIntToPtr': (c_object_p,
                          ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildBitCast': (c_object_p,
                         ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildZExtOrBitCast': (c_object_p,
                               ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildSExtOrBitCast': (c_object_p,
                               ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildTruncOrBitCast': (c_object_p,
                                ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildCast': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMOpcode', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildPointerCast': (c_object_p,
                             ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildIntCast': (c_object_p,
                         ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildFPCast': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildICmp': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMIntPredicate', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildFCmp': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMRealPredicate', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildPhi': (c_object_p,
                     ['LLVMBuilderRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildCall': (c_object_p,
                      ['LLVMBuilderRef', 'LLVMValueRef', ctypes.POINTER(c_object_p), ctypes.c_uint, ctypes.c_char_p]),
    'LLVMBuildSelect': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildVAArg': (c_object_p,
                       ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMTypeRef', ctypes.c_char_p]),
    'LLVMBuildExtractElement': (c_object_p,
                                ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildInsertElement': (c_object_p,
                               ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildShuffleVector': (c_object_p,
                               ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildExtractValue': (c_object_p,
                              ['LLVMBuilderRef', 'LLVMValueRef', ctypes.c_uint, ctypes.c_char_p]),
    'LLVMBuildInsertValue': (c_object_p,
                             ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_uint, ctypes.c_char_p]),
    'LLVMBuildIsNull': (c_object_p,
                        ['LLVMBuilderRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildIsNotNull': (c_object_p,
                           ['LLVMBuilderRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildPtrDiff': (c_object_p,
                         ['LLVMBuilderRef', 'LLVMValueRef', 'LLVMValueRef', ctypes.c_char_p]),
    'LLVMBuildAtomicRMW': (c_object_p,
                           ['LLVMBuilderRef', 'LLVMAtomicRMWBinOp', 'LLVMValueRef', 'LLVMValueRef', 'LLVMAtomicOrdering', 'LLVMBool']),
    'LLVMCreateModuleProviderForExistingModule': (c_object_p,
                                                  ['LLVMModuleRef']),
    'LLVMDisposeModuleProvider': (None,
                                  ['LLVMModuleProviderRef']),
    'LLVMCreateMemoryBufferWithContentsOfFile': ('LLVMBool',
                                                 [ctypes.c_char_p, ctypes.POINTER(c_object_p), ctypes.POINTER(ctypes.c_char_p)]),
    'LLVMCreateMemoryBufferWithSTDIN': ('LLVMBool',
                                        [ctypes.POINTER(c_object_p), ctypes.POINTER(ctypes.c_char_p)]),
    'LLVMCreateMemoryBufferWithMemoryRange': (c_object_p,
                                              [ctypes.c_char_p, ctypes.c_size_t, ctypes.c_char_p, 'LLVMBool']),
    'LLVMCreateMemoryBufferWithMemoryRangeCopy': (c_object_p,
                                                  [ctypes.c_char_p, ctypes.c_size_t, ctypes.c_char_p]),
    'LLVMGetBufferStart': (ctypes.POINTER(ctypes.c_char),
                           ['LLVMMemoryBufferRef']),
    'LLVMGetBufferSize': (ctypes.c_size_t,
                          ['LLVMMemoryBufferRef']),
    'LLVMDisposeMemoryBuffer': (None,
                                ['LLVMMemoryBufferRef']),
    'LLVMGetGlobalPassRegistry': (c_object_p,
                                  []),
    'LLVMCreatePassManager': (c_object_p,
                              []),
    'LLVMCreateFunctionPassManagerForModule': (c_object_p,
                                               ['LLVMModuleRef']),
    'LLVMCreateFunctionPassManager': (c_object_p,
                                      ['LLVMModuleProviderRef']),
    'LLVMRunPassManager': ('LLVMBool',
                           ['LLVMPassManagerRef', 'LLVMModuleRef']),
    'LLVMInitializeFunctionPassManager': ('LLVMBool',
                                          ['LLVMPassManagerRef']),
    'LLVMRunFunctionPassManager': ('LLVMBool',
                                   ['LLVMPassManagerRef', 'LLVMValueRef']),
    'LLVMFinalizeFunctionPassManager': ('LLVMBool',
                                        ['LLVMPassManagerRef']),
    'LLVMDisposePassManager': (None,
                               ['LLVMPassManagerRef']),
}

enum_declarations = {
    'LLVMAttribute': {
                     'LLVMZExtAttribute': 1,
                     'LLVMSExtAttribute': 2,
                     'LLVMNoReturnAttribute': 4,
                     'LLVMInRegAttribute': 8,
                     'LLVMStructRetAttribute': 16,
                     'LLVMNoUnwindAttribute': 32,
                     'LLVMNoAliasAttribute': 64,
                     'LLVMByValAttribute': 128,
                     'LLVMNestAttribute': 256,
                     'LLVMReadNoneAttribute': 512,
                     'LLVMReadOnlyAttribute': 1024,
                     'LLVMNoInlineAttribute': 2048,
                     'LLVMAlwaysInlineAttribute': 4096,
                     'LLVMOptimizeForSizeAttribute': 8192,
                     'LLVMStackProtectAttribute': 16384,
                     'LLVMStackProtectReqAttribute': 32768,
                     'LLVMAlignment': 2031616,
                     'LLVMNoCaptureAttribute': 2097152,
                     'LLVMNoRedZoneAttribute': 4194304,
                     'LLVMNoImplicitFloatAttribute': 8388608,
                     'LLVMNakedAttribute': 16777216,
                     'LLVMInlineHintAttribute': 33554432,
                     'LLVMStackAlignment': 469762048,
                     'LLVMReturnsTwice': 536870912,
                     'LLVMUWTable': 1073741824,
                     'LLVMNonLazyBind': -2147483648,
    },

    'LLVMOpcode': {
                  'LLVMRet': 1,
                  'LLVMBr': 2,
                  'LLVMSwitch': 3,
                  'LLVMIndirectBr': 4,
                  'LLVMInvoke': 5,
                  'LLVMUnreachable': 7,
                  'LLVMAdd': 8,
                  'LLVMFAdd': 9,
                  'LLVMSub': 10,
                  'LLVMFSub': 11,
                  'LLVMMul': 12,
                  'LLVMFMul': 13,
                  'LLVMUDiv': 14,
                  'LLVMSDiv': 15,
                  'LLVMFDiv': 16,
                  'LLVMURem': 17,
                  'LLVMSRem': 18,
                  'LLVMFRem': 19,
                  'LLVMShl': 20,
                  'LLVMLShr': 21,
                  'LLVMAShr': 22,
                  'LLVMAnd': 23,
                  'LLVMOr': 24,
                  'LLVMXor': 25,
                  'LLVMAlloca': 26,
                  'LLVMLoad': 27,
                  'LLVMStore': 28,
                  'LLVMGetElementPtr': 29,
                  'LLVMTrunc': 30,
                  'LLVMZExt': 31,
                  'LLVMSExt': 32,
                  'LLVMFPToUI': 33,
                  'LLVMFPToSI': 34,
                  'LLVMUIToFP': 35,
                  'LLVMSIToFP': 36,
                  'LLVMFPTrunc': 37,
                  'LLVMFPExt': 38,
                  'LLVMPtrToInt': 39,
                  'LLVMIntToPtr': 40,
                  'LLVMBitCast': 41,
                  'LLVMICmp': 42,
                  'LLVMFCmp': 43,
                  'LLVMPHI': 44,
                  'LLVMCall': 45,
                  'LLVMSelect': 46,
                  'LLVMUserOp1': 47,
                  'LLVMUserOp2': 48,
                  'LLVMVAArg': 49,
                  'LLVMExtractElement': 50,
                  'LLVMInsertElement': 51,
                  'LLVMShuffleVector': 52,
                  'LLVMExtractValue': 53,
                  'LLVMInsertValue': 54,
                  'LLVMFence': 55,
                  'LLVMAtomicCmpXchg': 56,
                  'LLVMAtomicRMW': 57,
                  'LLVMResume': 58,
                  'LLVMLandingPad': 59,
    },

    'LLVMTypeKind': {
                    'LLVMVoidTypeKind': 0,
                    'LLVMHalfTypeKind': 1,
                    'LLVMFloatTypeKind': 2,
                    'LLVMDoubleTypeKind': 3,
                    'LLVMX86_FP80TypeKind': 4,
                    'LLVMFP128TypeKind': 5,
                    'LLVMPPC_FP128TypeKind': 6,
                    'LLVMLabelTypeKind': 7,
                    'LLVMIntegerTypeKind': 8,
                    'LLVMFunctionTypeKind': 9,
                    'LLVMStructTypeKind': 10,
                    'LLVMArrayTypeKind': 11,
                    'LLVMPointerTypeKind': 12,
                    'LLVMVectorTypeKind': 13,
                    'LLVMMetadataTypeKind': 14,
                    'LLVMX86_MMXTypeKind': 15,
    },

    'LLVMLinkage': {
                   'LLVMExternalLinkage': 0,
                   'LLVMAvailableExternallyLinkage': 1,
                   'LLVMLinkOnceAnyLinkage': 2,
                   'LLVMLinkOnceODRLinkage': 3,
                   'LLVMLinkOnceODRAutoHideLinkage': 4,
                   'LLVMWeakAnyLinkage': 5,
                   'LLVMWeakODRLinkage': 6,
                   'LLVMAppendingLinkage': 7,
                   'LLVMInternalLinkage': 8,
                   'LLVMPrivateLinkage': 9,
                   'LLVMDLLImportLinkage': 10,
                   'LLVMDLLExportLinkage': 11,
                   'LLVMExternalWeakLinkage': 12,
                   'LLVMGhostLinkage': 13,
                   'LLVMCommonLinkage': 14,
                   'LLVMLinkerPrivateLinkage': 15,
                   'LLVMLinkerPrivateWeakLinkage': 16,
    },

    'LLVMVisibility': {
                      'LLVMDefaultVisibility': 0,
                      'LLVMHiddenVisibility': 1,
                      'LLVMProtectedVisibility': 2,
    },

    'LLVMCallConv': {
                    'LLVMCCallConv': 0,
                    'LLVMFastCallConv': 8,
                    'LLVMColdCallConv': 9,
                    'LLVMX86StdcallCallConv': 64,
                    'LLVMX86FastcallCallConv': 65,
    },

    'LLVMIntPredicate': {
                        'LLVMIntEQ': 32,
                        'LLVMIntNE': 33,
                        'LLVMIntUGT': 34,
                        'LLVMIntUGE': 35,
                        'LLVMIntULT': 36,
                        'LLVMIntULE': 37,
                        'LLVMIntSGT': 38,
                        'LLVMIntSGE': 39,
                        'LLVMIntSLT': 40,
                        'LLVMIntSLE': 41,
    },

    'LLVMRealPredicate': {
                         'LLVMRealPredicateFalse': 0,
                         'LLVMRealOEQ': 1,
                         'LLVMRealOGT': 2,
                         'LLVMRealOGE': 3,
                         'LLVMRealOLT': 4,
                         'LLVMRealOLE': 5,
                         'LLVMRealONE': 6,
                         'LLVMRealORD': 7,
                         'LLVMRealUNO': 8,
                         'LLVMRealUEQ': 9,
                         'LLVMRealUGT': 10,
                         'LLVMRealUGE': 11,
                         'LLVMRealULT': 12,
                         'LLVMRealULE': 13,
                         'LLVMRealUNE': 14,
                         'LLVMRealPredicateTrue': 15,
    },

    'LLVMLandingPadClauseTy': {
                              'LLVMLandingPadCatch': 0,
                              'LLVMLandingPadFilter': 1,
    },

    'LLVMThreadLocalMode': {
                           'LLVMNotThreadLocal': 0,
                           'LLVMGeneralDynamicTLSModel': 1,
                           'LLVMLocalDynamicTLSModel': 2,
                           'LLVMInitialExecTLSModel': 3,
                           'LLVMLocalExecTLSModel': 4,
    },

    'LLVMAtomicOrdering': {
                          'LLVMAtomicOrderingNotAtomic': 0,
                          'LLVMAtomicOrderingUnordered': 1,
                          'LLVMAtomicOrderingMonotonic': 2,
                          'LLVMAtomicOrderingAcquire': 4,
                          'LLVMAtomicOrderingRelease': 5,
                          'LLVMAtomicOrderingAcquireRelease': 6,
                          'LLVMAtomicOrderingSequentiallyConsistent': 7,
    },

    'LLVMAtomicRMWBinOp': {
                          'LLVMAtomicRMWBinOpXchg': 0,
                          'LLVMAtomicRMWBinOpAdd': 1,
                          'LLVMAtomicRMWBinOpSub': 2,
                          'LLVMAtomicRMWBinOpAnd': 3,
                          'LLVMAtomicRMWBinOpNand': 4,
                          'LLVMAtomicRMWBinOpOr': 5,
                          'LLVMAtomicRMWBinOpXor': 6,
                          'LLVMAtomicRMWBinOpMax': 7,
                          'LLVMAtomicRMWBinOpMin': 8,
                          'LLVMAtomicRMWBinOpUMax': 9,
                          'LLVMAtomicRMWBinOpUMin': 10,
    },

}

